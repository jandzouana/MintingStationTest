{"ast":null,"code":"import _regeneratorRuntime from\"C:/Users/jessi/Desktop/Jessica2021/Dev/NFT Dev/FullstackMassiveNFTDevelopment-master/NFTFullPackage/MintingStation/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"C:/Users/jessi/Desktop/Jessica2021/Dev/NFT Dev/FullstackMassiveNFTDevelopment-master/NFTFullPackage/MintingStation/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";// constants\nimport Web3EthContract from\"web3-eth-contract\";import Web3 from\"web3\";import SmartContract from\"../../contracts/TBCNFTABI.json\";// log\nimport{fetchData}from\"../data/dataActions\";var connectRequest=function connectRequest(){return{type:\"CONNECTION_REQUEST\"};};var connectSuccess=function connectSuccess(payload){return{type:\"CONNECTION_SUCCESS\",payload:payload};};var connectFailed=function connectFailed(payload){return{type:\"CONNECTION_FAILED\",payload:payload};};var updateAccountRequest=function updateAccountRequest(payload){return{type:\"UPDATE_ACCOUNT\",payload:payload};};export var connect=function connect(){return/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch){var _window,ethereum,metamaskIsInstalled,web3,accounts,networkId,SmartContractObj;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:dispatch(connectRequest());_window=window,ethereum=_window.ethereum;metamaskIsInstalled=ethereum&&ethereum.isMetaMask;_context.next=5;return window.ethereum.request({method:\"eth_requestAccounts\"});case 5:if(!metamaskIsInstalled){_context.next=23;break;}Web3EthContract.setProvider(ethereum);web3=new Web3(ethereum);_context.prev=8;_context.next=11;return ethereum.request({method:\"eth_requestAccounts\"});case 11:accounts=_context.sent;_context.next=14;return ethereum.request({method:\"net_version\"});case 14:networkId=_context.sent;// const NetworkData = await SmartContract.networks[networkId];\nif(networkId==1){SmartContractObj=new Web3EthContract(SmartContract,\"0x688db0131c807a3495c23bc1b25726a76ea31f49\");dispatch(connectSuccess({account:accounts[0],smartContract:SmartContractObj,web3:web3}));// Add listeners start\nethereum.on(\"accountsChanged\",function(accounts){dispatch(updateAccount(accounts[0]));});ethereum.on(\"chainChanged\",function(){window.location.reload();});// Add listeners end\n}else{dispatch(connectFailed(\"Change network to Ethereum\"));}_context.next=21;break;case 18:_context.prev=18;_context.t0=_context[\"catch\"](8);dispatch(connectFailed(\"Something went wrong\"));case 21:_context.next=24;break;case 23:dispatch(connectFailed(\"Install Metamask\"));case 24:case\"end\":return _context.stop();}}},_callee,null,[[8,18]]);}));return function(_x){return _ref.apply(this,arguments);};}();};export var updateAccount=function updateAccount(account){return/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch){return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:dispatch(updateAccountRequest({account:account}));dispatch(fetchData(account));case 2:case\"end\":return _context2.stop();}}},_callee2);}));return function(_x2){return _ref2.apply(this,arguments);};}();};","map":{"version":3,"sources":["C:/Users/jessi/Desktop/Jessica2021/Dev/NFT Dev/FullstackMassiveNFTDevelopment-master/NFTFullPackage/MintingStation/src/redux/blockchain/blockchainActions.js"],"names":["Web3EthContract","Web3","SmartContract","fetchData","connectRequest","type","connectSuccess","payload","connectFailed","updateAccountRequest","connect","dispatch","window","ethereum","metamaskIsInstalled","isMetaMask","request","method","setProvider","web3","accounts","networkId","SmartContractObj","account","smartContract","on","updateAccount","location","reload"],"mappings":"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","sourcesContent":["// constants\r\nimport Web3EthContract from \"web3-eth-contract\";\r\nimport Web3 from \"web3\";\r\nimport SmartContract from \"../../contracts/TBCNFTABI.json\";\r\n// log\r\nimport { fetchData } from \"../data/dataActions\";\r\n\r\nconst connectRequest = () => {\r\n  return {\r\n    type: \"CONNECTION_REQUEST\",\r\n  };\r\n};\r\n\r\nconst connectSuccess = (payload) => {\r\n  return {\r\n    type: \"CONNECTION_SUCCESS\",\r\n    payload: payload,\r\n  };\r\n};\r\n\r\nconst connectFailed = (payload) => {\r\n  return {\r\n    type: \"CONNECTION_FAILED\",\r\n    payload: payload,\r\n  };\r\n};\r\n\r\nconst updateAccountRequest = (payload) => {\r\n  return {\r\n    type: \"UPDATE_ACCOUNT\",\r\n    payload: payload,\r\n  };\r\n};\r\n\r\nexport const connect = () => {\r\n  return async (dispatch) => {\r\n    dispatch(connectRequest());\r\n    const { ethereum } = window;\r\n    const metamaskIsInstalled = ethereum && ethereum.isMetaMask;\r\n    await window.ethereum.request({\r\n      method: \"eth_requestAccounts\",\r\n  });\r\n    if (metamaskIsInstalled) {\r\n      Web3EthContract.setProvider(ethereum);\r\n      let web3 = new Web3(ethereum);\r\n      try {\r\n        const accounts = await ethereum.request({\r\n          method: \"eth_requestAccounts\",\r\n        });\r\n        const networkId = await ethereum.request({\r\n          method: \"net_version\",\r\n        });\r\n        // const NetworkData = await SmartContract.networks[networkId];\r\n        if (networkId == 1) {\r\n          const SmartContractObj = new Web3EthContract(\r\n            SmartContract,\r\n            \"0x688db0131c807a3495c23bc1b25726a76ea31f49\"\r\n          );\r\n          dispatch(\r\n            connectSuccess({\r\n              account: accounts[0],\r\n              smartContract: SmartContractObj,\r\n              web3: web3,\r\n            })\r\n          );\r\n          // Add listeners start\r\n          ethereum.on(\"accountsChanged\", (accounts) => {\r\n            dispatch(updateAccount(accounts[0]));\r\n          });\r\n          ethereum.on(\"chainChanged\", () => {\r\n            window.location.reload();\r\n          });\r\n          // Add listeners end\r\n        } else {\r\n          dispatch(connectFailed(\"Change network to Ethereum\"));\r\n        }\r\n      } catch (err) {\r\n        dispatch(connectFailed(\"Something went wrong\"));\r\n      }\r\n    } else {\r\n      dispatch(connectFailed(\"Install Metamask\"));\r\n    }\r\n  };\r\n};\r\n\r\nexport const updateAccount = (account) => {\r\n  return async (dispatch) => {\r\n    dispatch(updateAccountRequest({ account: account }));\r\n    dispatch(fetchData(account));\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}